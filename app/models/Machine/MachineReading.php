<?php namespace Machine;
///////////////////
//* Description *//
///////////////////
/**
 * The Machine Reading Model represents a Reading generated by a Machine.
 *
 * A Machine Reading is typically used in one (and only one) form.
 *
 * @category   MVC
 * @package    Models
 * @subpackage Machine
 * @author     Tyler Reed (Original Author) <tylernathanreed@gmail.com>
 * @copyright  2014 Epimed International
 * @version    1.0 (11/9/2014)
 */
  
/////////////////////////////
//* Machine Reading Model *//
/////////////////////////////
class MachineReading extends \BaseModel
{
	/////////////////////////
	//* Table Information *//
	/////////////////////////
	/**
	 * The Database Table used by the Model.
	 *
	 * @var string
	 */
	protected $table = 'machineReading';

	///////////////////
	//* Primary Key *//
	///////////////////
	/**
	 * The Primary Key of the Table.
	 *
	 * @var int
	 */
	protected $primaryKey = 'id';

	//////////////////////////
	//* Column Information *//
	//////////////////////////
	/**
	 * Determines which Columns are Fillable. This protects against Mass Assignment.
	 *
	 * @var string[]
	 */
	protected $fillable = array('value');

	//////////////////////////////////////
	//* Singular General Relationships *//
	//////////////////////////////////////
	/**
	 * Returns the Setting used by this Reading
	 *
	 * @return MachineSetting
	 */
	public function settingUsed()
	{
		return $this->belongsTo('MachineSetting', 'setting_id', 'id');
	}

	/**
	 * Returns the Machine that generated this Reading
	 *
	 * @return Machine
	 */
	public function machine()
	{
		return $this->settingUsed->machineUsed();
	}

	/**
	 * Returns the Type of the Reading
	 *
	 * @return MachineReading
	 */
	public function type()
	{
		return $this->settingUsed->readingType();
	}

	///////////////////////////
	//* Usage Relationships *//
	///////////////////////////
	/**
	 * Returns what this Reading was for
	 *
	 * All Readings reference one and only one Model using a
	 * 0 to 1 Optional Relationship. Only one of these Relationships
	 * will actually exist for each Reading, and thus all subqueries
	 * may be unioned to form a 1 to 1 Mandatory Relationship with some
	 * Model.
	 *
	 * @return Model
	 */
	public function what()
	{
		// Determine the Result for all Subqueries
		$results = array();

		array_push($results, $this->batch());

		// Return the only Non-Null Result
		foreach($results as $result)
			if(!is_null($result))
				return $result;

		// Relationship MUST Exist
		throw new Exception('Invalid State');
	}

	/**
	 * Returns the Batch that uses this Reading
	 *
	 * @return Batch
	 */
	public function batch()
	{
		return $this->belongsToMany('Batch', 'batch_machineReading', 'reading_id', 'batch_id');
	}
}